public class AdjacentProduct_8
{
   /* The four adjacent digits in the 1000-digit number that have the greatest product are 9 x 9 x 8 x 9 = 5832.
      73167176531330624919225119674426574742355349194934
      96983520312774506326239578318016984801869478851843
      85861560789112949495459501737958331952853208805511
      12540698747158523863050715693290963295227443043557
      66896648950445244523161731856403098711121722383113
      62229893423380308135336276614282806444486645238749
      30358907296290491560440772390713810515859307960866
      70172427121883998797908792274921901699720888093776
      65727333001053367881220235421809751254540594752243
      52584907711670556013604839586446706324415722155397
      53697817977846174064955149290862569321978468622482
      83972241375657056057490261407972968652414535100474
      82166370484403199890008895243450658541227588666881
      16427171479924442928230863465674813919123162824586
      17866458359124566529476545682848912883142607690042
      24219022671055626321111109370544217506941658960408
      07198403850962455444362981230987879927244284909188
      84580156166097919133875499200524063689912560717606
      05886116467109405077541002256983155200055935729725
      71636269561882670428252483600823257530420752963450
      Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. */
   public static void main(String[] args)
   {
      String theNumber = "73167176531330624919225119674426574742355349194934" +
                         "96983520312774506326239578318016984801869478851843" +
                         "85861560789112949495459501737958331952853208805511" +
                         "12540698747158523863050715693290963295227443043557" +
                         "66896648950445244523161731856403098711121722383113" +
                         "62229893423380308135336276614282806444486645238749" +
                         "30358907296290491560440772390713810515859307960866" +
                         "70172427121883998797908792274921901699720888093776" +
                         "65727333001053367881220235421809751254540594752243" +
                         "52584907711670556013604839586446706324415722155397" +
                         "53697817977846174064955149290862569321978468622482" +
                         "83972241375657056057490261407972968652414535100474" +
                         "82166370484403199890008895243450658541227588666881" +
                         "16427171479924442928230863465674813919123162824586" +
                         "17866458359124566529476545682848912883142607690042" +
                         "24219022671055626321111109370544217506941658960408" +
                         "07198403850962455444362981230987879927244284909188" +
                         "84580156166097919133875499200524063689912560717606" +
                         "05886116467109405077541002256983155200055935729725" +
                         "71636269561882670428252483600823257530420752963450";
      long largestProduct = 0;
      long currentProduct = 0;
      String values = "";
      long a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
      for(int x = 0; x < 988; x++)
      {
         a = Integer.parseInt(theNumber.charAt(x)+"");
         b = Integer.parseInt(theNumber.charAt(x + 1)+"");
         c = Integer.parseInt(theNumber.charAt(x + 2)+"");
         d = Integer.parseInt(theNumber.charAt(x + 3)+"");
         e = Integer.parseInt(theNumber.charAt(x + 4)+"");
         f = Integer.parseInt(theNumber.charAt(x + 5)+"");
         g = Integer.parseInt(theNumber.charAt(x + 6)+"");
         h = Integer.parseInt(theNumber.charAt(x + 7)+"");
         i = Integer.parseInt(theNumber.charAt(x + 8)+"");
         j = Integer.parseInt(theNumber.charAt(x + 9)+"");
         k = Integer.parseInt(theNumber.charAt(x + 10)+"");
         l = Integer.parseInt(theNumber.charAt(x + 11)+"");
         m = Integer.parseInt(theNumber.charAt(x + 12)+"");
         currentProduct = a * b * c * d * e * f * g * h * i * j * k * l * m;
         if(currentProduct > largestProduct)
         {
            largestProduct = currentProduct;
            values = a + " x " + b + " x " + c + " x " + d + " x " + e + " x " + f + " x " + g + " x " + 
                  h + " x " + i + " x " + j + " x " + k + " x " + l + " x " + m;
         }
      }
      System.out.println(largestProduct);
      System.out.println(values);
   }
}